version: '3.8'

services:
  # Main application
  chatbot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - GROQ_API_KEY=${GROQ_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-32-characters-long}
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8501
    volumes:
      - ../src:/app/src
      - ../tests:/app/tests
      - ../vector_store:/app/vector_store
      - ../data:/app/data
      - ../logs:/app/logs
    depends_on:
      - redis
    networks:
      - chatbot-network
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - chatbot-network
    restart: unless-stopped

  # PostgreSQL for future use
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=chatbot
      - POSTGRES_USER=chatbot
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-chatbot_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chatbot-network
    restart: unless-stopped

  # Streamlit UI
  streamlit:
    build:
      context: ..
      dockerfile: docker/Dockerfile.streamlit
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://chatbot:8000
    depends_on:
      - chatbot
    networks:
      - chatbot-network
    restart: unless-stopped

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - chatbot-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - chatbot-network
    restart: unless-stopped

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - chatbot
      - streamlit
    networks:
      - chatbot-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  chatbot-network:
    driver: bridge 